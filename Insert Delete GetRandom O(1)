class RandomizedSet {
public:
    vector<int> arr;
    unordered_map<int,int> um; // {num, respective array index}
        
    /** Initialize your data structure here. */
    RandomizedSet() {
       srand(time(NULL)); //Seeding the value once for diff output each time
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    bool insert(int val) {
        if(um.find(val)!=um.end())
            return false;
        arr.push_back(val);
        um[val]=arr.size()-1;
        return true;
        
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    bool remove(int val) {
        if(um.find(val)==um.end())
            return false;
        int index=um[val];
        arr[index]=arr[arr.size()-1];    
        um[arr[index]]=index;
        arr.pop_back();
        um.erase(val);
        return true;
    }
    
    /** Get a random element from the set. */
    int getRandom() {
        int index=(rand()+1) % arr.size();
        return arr[index];
    }
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet* obj = new RandomizedSet();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */
